$(document).ready(function() {
    create2D();
});

var width = 800;
var height = 350;
var color = d3.scale.category20();


// Create Nodes and Links
function create2D() {
    d3.json("data/node.json", function(error, graph) {
        var zoom = d3.behavior.zoom()
            .on("zoom", zoomed);

        var svg = d3.select('#svgSection').append('svg')
            .attr("viewBox", "0 0 " + width + " " + height)
            .attr("preserveAspectRatio", "xMidYMid meet")
            .append("g")

        // Added for Multi Paths
        var links = graph.links;

        links.sort(function(a, b) {
            if (a.source > b.source) {
                return 1;
            } else if (a.source < b.source) {
                return -1;
            } else {
                if (a.target > b.target) {
                    return 1;
                }
                if (a.target < b.target) {
                    return -1;
                } else {
                    return 0;
                }
            }
        });

        for (var i = 0; i < links.length; i++) {
            if (i != 0 &&
                links[i].source == links[i - 1].source &&
                links[i].target == links[i - 1].target) {
                links[i].linknum = links[i - 1].linknum + 1;
            } else {
                links[i].linknum = 1;
            };
        };

        var nodes = graph.nodes;

        // Compute the distinct nodes from the links.
        links.forEach(function(link) {
            link.source = nodes[link.source] || (nodes[link.source] = {
                name: link.source
            });
            link.target = nodes[link.target] || (nodes[link.target] = {
                name: link.target
            });
        });

        var nodeGroup = svg.append('g');

        var path = nodeGroup.selectAll("path")
            .data(links)
            .enter().append("svg:path")
            .attr('id', function(d) {
                return d.source.name
            })
            .attr("class", function(d) {
                return "link " + d.type;
            })

        var force = self.force = d3.layout.force()
            .nodes(graph.nodes)
            .links(graph.links)
            .size([width, height])
            .linkDistance(100)
            .charge(-900)
            .start();


        var node = nodeGroup.selectAll('.node').data(force.nodes()).enter().append('circle').attr('r', 20).attr('class', 'node')
            .call(force.drag)
            .style("fill", function(d) {
                return color(d.label);
            })
            .call(zoom)
            .on("mousedown.zoom", null)
            .on("touchstart.zoom", null)
            .on("touchmove.zoom", null)
            .on("touchend.zoom", null)

        var r = node.attr('r');


        var text = nodeGroup.selectAll('text').data(force.nodes()).enter().append('text').attr('class', 'nodeName').call(force.drag).text(function(d) {
            return ""
        });


        var distance = nodeGroup.selectAll('.distance')
            .data(links).enter().append('svg:text')
            .attr('class', 'distance')
            .attr('text-anchor', 'start')
            .attr('dy', '0')
            .attr('xlink:href', function(d) {
                return '#' + d.source.name
            })
            .attr('startoffset', '50%')
            .text(function(d) {
                return d.distance
            })

        // Distance Between Links
        var relativeDistance = 10

        force.on('tick', function(d) {
            // Added For Multi Path
            path.attr("d", function(d) {
                var dx = d.target.x - d.source.x,
                    dy = d.target.y - d.source.y,
                    dr = 100 / d.linknum;
                if (d.linknum == 1) {
                    return "M" + d.source.x + "," + d.source.y + "L" + d.target.x + "," + d.target.y;
                } else if (d.linknum == 2) {
                    return "M" + ((d.source.x) + relativeDistance) + "," + ((d.source.y) + relativeDistance) + "L" + ((d.target.x) + relativeDistance) + "," + ((d.target.y) + relativeDistance);
                } else {
                    return "M" + ((d.source.x) - relativeDistance) + "," + ((d.source.y) - relativeDistance) + "L" + ((d.target.x) - relativeDistance) + "," + ((d.target.y) - relativeDistance);

                }
            });
            // Ends for Multi Path

            node.attr("cx", function(d) {
                    return d.x = Math.max(r, Math.min(width - r, d.x));
                })
                .attr("cy", function(d) {
                    return d.y = Math.max(r, Math.min(height - r, d.y));
                });

            distance.attr("transform", function(d) {
                if (d.linknum == 1) {
                    //return "translate(" + (((d.source.x) + (d.target.x)) / 2) + "," + (((d.source.y) + (d.target.y)) / 2) + "),rotate("+ (((180/Math.PI)*(((((d.target.y) - (d.source.y)) / ((d.target.x) - (d.source.x))))))) +")";

                    return "translate(" + (((d.source.x) + (d.target.x)) / 2) + "," + (((d.source.y) + (d.target.y)) / 2) + ") rotate(" + createAngle(d.source.x, d.target.x, d.source.y, d.target.y) + ")";
                } else if (d.linknum == 2) {
                    return "translate(" + ((((d.source.x) + relativeDistance) + ((d.target.x) + relativeDistance)) / 2) + "," + ((((d.source.y) + relativeDistance) + ((d.target.y) + relativeDistance)) / 2) + "),rotate(" + createAngle(d.source.x, d.target.x, d.source.y, d.target.y) + ")";
                } else {
                    return "translate(" + ((((d.source.x) - relativeDistance) + ((d.target.x) - relativeDistance)) / 2) + "," + ((((d.source.y) - relativeDistance) + ((d.target.y) - relativeDistance)) / 2) + "),rotate(" + createAngle(d.source.x, d.target.x, d.source.y, d.target.y) + ")";
                }

            });

            text.attr("transform", function(d) {
                return "translate(" + ((d.x) + 20) + "," + ((d.y) + 0) + ")";
            });


        });

        // Zooming
        function zoomed(d) {
            svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        }

        // Dragging Declaration
        var drag = force.drag()
            .on("dragstart", dragstart);

        // Dragging Definition
        function dragstart(d) {
            d3.select(this).classed(d.fixed = true);
        }

    });
}

function createAngle(x, x1, y, y1) {
    angle = (((180 / Math.PI) * (Math.atan((((y1) - (y)) / ((x1) - (x)) )))));
    return angle;
}