<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>Homebudget</groupId>
  <artifactId>com.budget.server</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>com.budget.server Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.2.5.RELEASE</version>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.jmockit</groupId>
			<artifactId>jmockit</artifactId>
			<version>1.8</version>
			<scope>test</scope>
		</dependency>
		<!-- <dependency> <groupId>org.codehaus.sonar</groupId> <artifactId>sonar-maven-plugin</artifactId> 
			<version>3.4</version> </dependency> -->

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.9.6</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<!-- if your container implements Servlet API older than 3.0, use "jersey-container-servlet-core" -->
			<artifactId>jersey-container-servlet</artifactId>
			<version>2.7</version>
		</dependency>
		<!-- Required only when you are using JAX-RS Client -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<version>2.7</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>2.2.3</version>
		</dependency>

		<!-- Spring Boot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- In order to build RESTful Service we would need make use of: spring web, 
		JSON processing libraries, embedded tomcat or tomcat libraries,
		 may be some library for validators like Hibernate validator. 
		 We might not remember all the dependencies required or might have to refer to some place to know 
		 which dependencies are required. To solve such issues Spring Boot provides a pom 
		 already configured with the dependencies 
		required to build a web application and that pom is called: spring-boot-starter-web. --> 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		 <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
	<!-- 	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency> -->
		<!-- Hibernate validator -->
	<!-- 	<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency> -->
		<!-- HSQLDB -->
		<!-- <dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>runtime</scope>
		</dependency> -->
		<!-- Guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>14.0.1</version>
		</dependency>
		<!-- Java EE -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
		<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-integration</artifactId>
	</dependency>
		
	<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		<scope>runtime</scope>
			</dependency>

	</dependencies>
	<properties>
	<start-class>com.cisco.voicemail.Application</start-class>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		</properties>
	 <profiles>

		<!-- better to have keep this sonar profile in your maven settings.xml -->
		<profile>
			<id>sonar</id>
			
			<properties>

				<!-- Sonar -->
				<sonar.scm.disabled>false</sonar.scm.disabled>
				<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
				<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
				<sonar.jacoco.reportPath>${project.build.directory}/jacoco.exec</sonar.jacoco.reportPath>
				<sonar.language>java</sonar.language>
			</properties>

		</profile>

	</profiles> 
	<build>
		<finalName>HelloWorld</finalName>


		<plugins>

			<!-- define directories for jococo -->
			<!-- define directories for jococo -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.1.201405082137</version>
				<!-- <version>0.7.4.201502262128</version> -->
				<configuration>
					<destFile>${sonar.jacoco.reportPath}</destFile>
					<!-- <dataFile>${sonar.jacoco.reportPath}</dataFile> -->
					<append>true</append>
				</configuration>

				<executions>
					<execution>
						<id>agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>

			</plugin>
			<!-- maven compiler -->

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>ISO-8859-1</encoding>
				</configuration>
			</plugin>

			<!-- Spring Boot Maven -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				 <!-- <version>1.3.0.BUILD-SNAPSHOT</version> -->
			<!--  <configuration>
        <mainClass>${start-class}</mainClass>
        <layout>ZIP</layout>
      </configuration> -->
				
		<!-- 		  <executions>
        <execution>
          <goals>
            <goal>repackage</goal>
          </goals>
        </execution>
       
      </executions> -->
       
        <!-- <executions>
         <execution>
          <id>pre-integration-test</id>
          <goals>
            <goal>start</goal>
          </goals>
        </execution>
        
        <execution>
          <id>post-integration-test</id>
          <goals>
            <goal>stop</goal>
          </goals>
        </execution>
       
        </executions> -->
			</plugin>

		</plugins>
	</build>
</project>
 
